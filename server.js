const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const session = require('express-session');
const app = express();
require('dotenv').config();

// Importer les mod√®les et la connexion MongoDB
const connectDB = require('./models/db');
const User = require('./models/User');
const SeenCelebrity = require('./models/SeenCelebrity');

// Configuration du middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(session({
    secret: 'votre_clef_secrete',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: false, // mettre true en production avec HTTPS
        httpOnly: true,
        maxAge: 24 * 60 * 60 * 1000 // 24 heures
    }
}));

// Cr√©ation du compte admin s'il n'existe pas
const createAdminAccount = async () => {
    try {
        const adminExists = await User.findOne({ 
            firstname: 'admin', 
            lastname: 'admin' 
        });

        if (!adminExists) {
            console.log('Cr√©ation du compte admin...');
            await User.create({
                id: Date.now(),
                firstname: 'admin',
                lastname: 'admin',
                password: 'admin',
                score: 0,
                isAdmin: true
            });
            console.log('Compte admin cr√©√© avec succ√®s');
        }
    } catch (error) {
        console.error('Erreur lors de la cr√©ation du compte admin:', error);
    }
};

// Middleware pour logger les requ√™tes
app.use((req, res, next) => {
    console.log(`${req.method} ${req.path} - Session:`, req.session.user ? 'Connect√©' : 'Non connect√©');
    next();
});

// Middleware d'authentification
const requireAuth = (req, res, next) => {
    console.log('=== Tentative d\'acc√®s √† une ressource prot√©g√©e ===');
    console.log('URL:', req.url);
    console.log('Session:', req.session.user ? 'Connect√©' : 'Non connect√©');
    
    if (!req.session.user) {
        console.log('‚ùå Acc√®s refus√© - Redirection vers login');
        return res.redirect('/login.html');
    }
    console.log('‚úÖ Acc√®s autoris√©');
    next();
};

// Middleware d'authentification admin
const requireAdmin = (req, res, next) => {
    console.log('=== V√©rification des droits admin ===');
    console.log('Session utilisateur:', req.session.user);
    
    if (!req.session.user) {
        console.log('‚ùå Pas de session utilisateur');
        return res.redirect('/login.html');
    }
    
    if (req.session.user.firstname !== 'admin' || req.session.user.lastname !== 'admin') {
        console.log('‚ùå Utilisateur non admin:', req.session.user.firstname, req.session.user.lastname);
        return res.redirect('/');
    }
    
    console.log('‚úÖ Acc√®s admin autoris√©');
    next();
};

// Routes publiques
app.get('/login.html', (req, res) => {
    if (req.session.user) {
        return res.redirect('/');
    }
    res.sendFile(path.join(__dirname, 'login.html'));
});

app.get('/', (req, res) => {
    if (!req.session.user) {
        return res.redirect('/login.html');
    }
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Fichiers statiques publics
app.use('/login.js', express.static(path.join(__dirname, 'login.js')));
app.use('/style.css', express.static(path.join(__dirname, 'style.css')));

// Protection des routes du jeu
app.use('/script.js', express.static(path.join(__dirname, 'script.js')));

// Servir les images de mani√®re prot√©g√©e
app.use('/images', requireAuth, (req, res, next) => {
    // D√©sactiver le cache pour les images
    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');
    next();
}, express.static(path.join(__dirname, 'images')));

// Servir les autres fichiers statiques apr√®s l'authentification
app.use(express.static(__dirname));

// Route de test pour v√©rifier la base de donn√©es (prot√©g√©e)
app.get('/test-db', requireAdmin, async (req, res) => {
    try {
        console.log('=== √âtat actuel de la base de donn√©es ===');
        const users = await User.find({});
        const seenCelebrities = await SeenCelebrity.find({});
        
        // Ajouter les informations utilisateur aux c√©l√©brit√©s vues
        const seenCelebritiesWithUserInfo = await Promise.all(seenCelebrities.map(async seen => {
            const user = await User.findOne({ id: seen.user_id });
            return {
                ...seen.toObject(),
                user_name: user ? `${user.firstname} ${user.lastname}` : 'Utilisateur inconnu'
            };
        }));

        // Calculer les statistiques des c√©l√©brit√©s
        const celebrityStats = {};
        for (const seen of seenCelebrities) {
            if (!celebrityStats[seen.celebrity_name]) {
                celebrityStats[seen.celebrity_name] = {
                    name: seen.celebrity_name,
                    found_by: []
                };
            }
            const user = await User.findOne({ id: seen.user_id });
            if (user && !celebrityStats[seen.celebrity_name].found_by.includes(`${user.firstname} ${user.lastname}`)) {
                celebrityStats[seen.celebrity_name].found_by.push(`${user.firstname} ${user.lastname}`);
            }
        }

        const celebrityStatsArray = Object.values(celebrityStats).sort((a, b) => b.found_by.length - a.found_by.length);

        console.log('Utilisateurs:', users);
        console.log('C√©l√©brit√©s vues:', seenCelebritiesWithUserInfo);
        console.log('Statistiques des c√©l√©brit√©s:', celebrityStatsArray);
        
        res.json({
            users: users,
            seen_celebrities: seenCelebritiesWithUserInfo,
            celebrity_stats: celebrityStatsArray
        });
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des donn√©es:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Route d'inscription avec logs am√©lior√©s
app.post('/register', async (req, res) => {
    try {
        console.log('\n=== Nouvelle tentative d\'inscription ===');
        console.log('Donn√©es re√ßues:', req.body);
        const { firstname, lastname, password } = req.body;
        
        const existingUser = await User.findOne({ firstname, lastname });

        if (existingUser) {
            console.log('‚ùå Utilisateur d√©j√† existant:', existingUser);
            return res.status(400).send('Cet utilisateur existe d√©j√†');
        }

        const newUser = await User.create({
            id: Date.now(),
            firstname,
            lastname,
            password,
            score: 0
        });

        console.log('‚úÖ Nouvel utilisateur cr√©√©:', newUser);

        req.session.user = {
            id: newUser.id,
            firstname,
            lastname,
            score: 0
        };

        console.log('üîë Session cr√©√©e:', req.session.user);
        res.json({ success: true, redirect: '/' });
    } catch (error) {
        console.error('Erreur lors de l\'inscription:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Route de connexion avec logs am√©lior√©s
app.post('/login', async (req, res) => {
    try {
        console.log('\n=== Nouvelle tentative de connexion ===');
        console.log('Donn√©es re√ßues:', req.body);
        const { firstname, lastname, password } = req.body;
        
        const user = await User.findOne({ firstname, lastname, password });

        if (!user) {
            console.log('‚ùå √âchec de la connexion: utilisateur non trouv√©');
            return res.status(401).send('Identifiants incorrects');
        }

        console.log('‚úÖ Utilisateur trouv√©:', user);

        req.session.user = {
            id: user.id,
            firstname: user.firstname,
            lastname: user.lastname,
            score: user.score
        };

        console.log('üîë Session cr√©√©e:', req.session.user);
        
        // Redirection vers admin.html si l'utilisateur est admin
        const redirectUrl = (firstname === 'admin' && lastname === 'admin') ? '/admin.html' : '/';
        console.log('üîÑ Redirection vers:', redirectUrl);
        res.json({ success: true, redirect: redirectUrl });
    } catch (error) {
        console.error('Erreur lors de la connexion:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Route pour obtenir les c√©l√©brit√©s trouv√©es
app.get('/get-found-celebrities', requireAuth, async (req, res) => {
    try {
        const foundCelebrities = await SeenCelebrity.find({ 
            user_id: req.session.user.id, 
            found: true 
        }).distinct('celebrity_name');

        res.json({ foundCelebrities });
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des c√©l√©brit√©s trouv√©es:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Route pour obtenir une nouvelle c√©l√©brit√©
app.get('/get-celebrity', requireAuth, async (req, res) => {
    try {
        const seenCelebrities = await SeenCelebrity.find({ 
            user_id: req.session.user.id 
        }).distinct('celebrity_name');

        res.json({ seenCelebrities });
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des c√©l√©brit√©s vues:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Route pour marquer une c√©l√©brit√© comme trouv√©e
app.post('/found-celebrity', requireAuth, async (req, res) => {
    try {
        const { celebrityName } = req.body;

        // V√©rifier si la c√©l√©brit√© a d√©j√† √©t√© trouv√©e
        const existing = await SeenCelebrity.findOne({ 
            user_id: req.session.user.id,
            celebrity_name: celebrityName,
            found: true
        });

        if (existing) {
            return res.status(400).send('C√©l√©brit√© d√©j√† trouv√©e');
        }

        // Supprimer toute entr√©e pr√©c√©dente pour cette c√©l√©brit√© (si elle a √©t√© vue mais pas trouv√©e)
        await SeenCelebrity.deleteMany({ 
            user_id: req.session.user.id,
            celebrity_name: celebrityName
        });

        // Ajouter la c√©l√©brit√© √† la liste des trouv√©es
        await SeenCelebrity.create({
            user_id: req.session.user.id,
            celebrity_name: celebrityName,
            seen_date: new Date(),
            found: true
        });

        // Mettre √† jour le score
        const user = await User.findOne({ id: req.session.user.id });

        // Ajouter 10 points pour une bonne r√©ponse
        const newScore = (user.score || 0) + 10;

        await User.updateOne(
            { id: req.session.user.id },
            { score: newScore }
        );

        req.session.user.score = newScore;

        res.json({ 
            success: true, 
            newScore: newScore
        });
    } catch (error) {
        console.error('Erreur lors du marquage d\'une c√©l√©brit√© comme trouv√©e:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Route pour marquer une c√©l√©brit√© comme vue mais pas trouv√©e
app.post('/seen-celebrity', requireAuth, async (req, res) => {
    try {
        const { celebrityName } = req.body;

        // V√©rifier si la c√©l√©brit√© a d√©j√† √©t√© trouv√©e
        const foundCelebrity = await SeenCelebrity.findOne({ 
            user_id: req.session.user.id,
            celebrity_name: celebrityName,
            found: true
        });

        // Si d√©j√† trouv√©e, ne rien faire
        if (foundCelebrity) {
            return res.json({ success: true });
        }

        // V√©rifier si la c√©l√©brit√© a d√©j√† √©t√© vue
        const seenCelebrity = await SeenCelebrity.findOne({ 
            user_id: req.session.user.id,
            celebrity_name: celebrityName,
            found: false
        });

        // Si d√©j√† vue, ne rien faire
        if (seenCelebrity) {
            return res.json({ success: true });
        }

        // Ajouter la c√©l√©brit√© √† la liste des vues
        await SeenCelebrity.create({
            user_id: req.session.user.id,
            celebrity_name: celebrityName,
            seen_date: new Date(),
            found: false
        });

        res.json({ success: true });
    } catch (error) {
        console.error('Erreur lors du marquage d\'une c√©l√©brit√© comme vue:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Route pour obtenir le score actuel
app.get('/get-score', requireAuth, async (req, res) => {
    try {
        const user = await User.findOne({ id: req.session.user.id });
        res.json({ score: user.score });
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration du score:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Route de d√©connexion
app.get('/logout', (req, res) => {
    req.session.destroy(() => {
        res.redirect('/login.html');
    });
});

// Route pour la page d'administration (prot√©g√©e)
app.get('/admin.html', requireAdmin, (req, res) => {
    res.sendFile(path.join(__dirname, 'admin.html'));
});

// Routes d'administration de la base de donn√©es (prot√©g√©es)
app.post('/admin/reset-db', requireAdmin, async (req, res) => {
    try {
        console.log('=== R√©initialisation de la base de donn√©es ===');
        await User.deleteMany({});
        await SeenCelebrity.deleteMany({});
        console.log('‚úÖ Base de donn√©es r√©initialis√©e');
        
        // Recr√©er le compte admin
        await createAdminAccount();
        
        res.json({ success: true, message: 'Base de donn√©es r√©initialis√©e' });
    } catch (error) {
        console.error('Erreur lors de la r√©initialisation de la base de donn√©es:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

app.post('/admin/delete-user', requireAdmin, async (req, res) => {
    try {
        const { userId } = req.body;
        console.log('=== Suppression de l\'utilisateur:', userId);
        
        // Supprimer l'utilisateur
        await User.deleteOne({ id: parseInt(userId) });
        
        // Supprimer ses c√©l√©brit√©s vues
        await SeenCelebrity.deleteMany({ user_id: parseInt(userId) });
        
        console.log('‚úÖ Utilisateur et ses donn√©es supprim√©s');
        res.json({ success: true, message: 'Utilisateur supprim√©' });
    } catch (error) {
        console.error('Erreur lors de la suppression de l\'utilisateur:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

app.post('/admin/clear-seen-celebrities', requireAdmin, async (req, res) => {
    try {
        console.log('=== Nettoyage de l\'historique des c√©l√©brit√©s vues ===');
        await SeenCelebrity.deleteMany({});
        console.log('‚úÖ Historique des c√©l√©brit√©s vues nettoy√©');
        res.json({ success: true, message: 'Historique des c√©l√©brit√©s vues nettoy√©' });
    } catch (error) {
        console.error('Erreur lors du nettoyage de l\'historique des c√©l√©brit√©s vues:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Route pour obtenir le classement des joueurs
app.get('/leaderboard', async (req, res) => {
    try {
        const users = await User.find({ 
            $or: [
                { firstname: { $ne: 'admin' } },
                { lastname: { $ne: 'admin' } }
            ]
        })
        .sort({ score: -1 })
        .lean();

        const leaderboard = users.map((user, index) => ({
            rank: index + 1,
            firstname: user.firstname,
            lastname: user.lastname,
            score: user.score || 0
        }));

        res.json({ leaderboard });
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration du classement:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Route pour mettre √† jour le score (pour les p√©nalit√©s)
app.post('/update-score', requireAuth, async (req, res) => {
    try {
        const { score } = req.body;
        
        if (score === undefined) {
            return res.status(400).send('Score manquant');
        }
        
        // Mettre √† jour le score dans la base de donn√©es
        await User.updateOne(
            { id: req.session.user.id },
            { score: score }
        );
        
        // Mettre √† jour le score dans la session
        req.session.user.score = score;
        
        res.json({ success: true, newScore: score });
    } catch (error) {
        console.error('Erreur lors de la mise √† jour du score:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Nouvelle route pour supprimer un utilisateur avec l'ID dans l'URL
app.post('/admin/delete-user/:userId', requireAdmin, async (req, res) => {
    try {
        const userId = req.params.userId;
        console.log('=== Suppression de l\'utilisateur (URL):', userId);

        // Supprimer l'utilisateur
        await User.deleteOne({ id: parseInt(userId) });

        // Supprimer ses c√©l√©brit√©s vues
        await SeenCelebrity.deleteMany({ user_id: parseInt(userId) });

        res.json({ success: true });
    } catch (error) {
        console.error('Erreur lors de la suppression de l\'utilisateur:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// Connexion √† MongoDB et d√©marrage du serveur
const PORT = process.env.PORT || 3000;

const startServer = async () => {
    try {
        // Connexion √† MongoDB
        await connectDB();
        
        // Cr√©ation du compte admin
        await createAdminAccount();
        
        // D√©marrage du serveur
        app.listen(PORT, '0.0.0.0', () => {
            console.log(`Serveur d√©marr√© sur le port ${PORT}`);
        });
    } catch (error) {
        console.error('Erreur lors du d√©marrage du serveur:', error);
        process.exit(1);
    }
};

startServer(); 