const express = require('express');
const path = require('path');
const low = require('lowdb');
const FileSync = require('lowdb/adapters/FileSync');
const bodyParser = require('body-parser');
const session = require('express-session');
const app = express();

// Configuration du middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(session({
    secret: 'votre_clef_secrete',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: false, // mettre true en production avec HTTPS
        httpOnly: true,
        maxAge: 24 * 60 * 60 * 1000 // 24 heures
    }
}));

// Initialisation de la base de donn√©es
const adapter = new FileSync('db.json');
const db = low(adapter);

// D√©finir la structure par d√©faut de la base de donn√©es
db.defaults({
    users: [],
    seen_celebrities: []
}).write();

// Cr√©ation du compte admin s'il n'existe pas
const createAdminAccount = () => {
    const adminExists = db.get('users')
        .find({ firstname: 'admin', lastname: 'admin' })
        .value();

    if (!adminExists) {
        console.log('Cr√©ation du compte admin...');
        db.get('users')
            .push({
                id: Date.now(),
                firstname: 'admin',
                lastname: 'admin',
                password: 'admin',
                score: 0
            })
            .write();
        console.log('Compte admin cr√©√© avec succ√®s');
    }
};

// Appeler la fonction au d√©marrage
createAdminAccount();

// Middleware pour logger les requ√™tes
app.use((req, res, next) => {
    console.log(`${req.method} ${req.path} - Session:`, req.session.user ? 'Connect√©' : 'Non connect√©');
    next();
});

// Middleware d'authentification
const requireAuth = (req, res, next) => {
    console.log('=== Tentative d\'acc√®s √† une ressource prot√©g√©e ===');
    console.log('URL:', req.url);
    console.log('Session:', req.session.user ? 'Connect√©' : 'Non connect√©');
    
    if (!req.session.user) {
        console.log('‚ùå Acc√®s refus√© - Redirection vers login');
        return res.redirect('/login.html');
    }
    console.log('‚úÖ Acc√®s autoris√©');
    next();
};

// Middleware d'authentification admin
const requireAdmin = (req, res, next) => {
    console.log('=== V√©rification des droits admin ===');
    console.log('Session utilisateur:', req.session.user);
    
    if (!req.session.user) {
        console.log('‚ùå Pas de session utilisateur');
        return res.redirect('/login.html');
    }
    
    if (req.session.user.firstname !== 'admin' || req.session.user.lastname !== 'admin') {
        console.log('‚ùå Utilisateur non admin:', req.session.user.firstname, req.session.user.lastname);
        return res.redirect('/');
    }
    
    console.log('‚úÖ Acc√®s admin autoris√©');
    next();
};

// Routes publiques
app.get('/login.html', (req, res) => {
    if (req.session.user) {
        return res.redirect('/');
    }
    res.sendFile(path.join(__dirname, 'login.html'));
});

app.get('/', (req, res) => {
    if (!req.session.user) {
        return res.redirect('/login.html');
    }
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Fichiers statiques publics
app.use('/login.js', express.static(path.join(__dirname, 'login.js')));
app.use('/style.css', express.static(path.join(__dirname, 'style.css')));

// Protection des routes du jeu
app.use('/script.js', express.static(path.join(__dirname, 'script.js')));

// Servir les images de mani√®re prot√©g√©e
app.use('/images', requireAuth, (req, res, next) => {
    // D√©sactiver le cache pour les images
    res.set('Cache-Control', 'no-store, no-cache, must-revalidate, private');
    res.set('Pragma', 'no-cache');
    res.set('Expires', '0');
    next();
}, express.static(path.join(__dirname, 'images')));

// Servir les autres fichiers statiques apr√®s l'authentification
app.use(express.static(__dirname));

// Route de test pour v√©rifier la base de donn√©es (prot√©g√©e)
app.get('/test-db', requireAdmin, (req, res) => {
    console.log('=== √âtat actuel de la base de donn√©es ===');
    const users = db.get('users').value();
    const seenCelebrities = db.get('seen_celebrities').value();
    
    // Ajouter les informations utilisateur aux c√©l√©brit√©s vues
    const seenCelebritiesWithUserInfo = seenCelebrities.map(seen => {
        const user = users.find(u => u.id === seen.user_id);
        return {
            ...seen,
            user_name: user ? `${user.firstname} ${user.lastname}` : 'Utilisateur inconnu'
        };
    });

    // Calculer les statistiques des c√©l√©brit√©s
    const celebrityStats = {};
    seenCelebrities.forEach(seen => {
        if (!celebrityStats[seen.celebrity_name]) {
            celebrityStats[seen.celebrity_name] = {
                name: seen.celebrity_name,
                found_by: []
            };
        }
        const user = users.find(u => u.id === seen.user_id);
        if (user && !celebrityStats[seen.celebrity_name].found_by.includes(`${user.firstname} ${user.lastname}`)) {
            celebrityStats[seen.celebrity_name].found_by.push(`${user.firstname} ${user.lastname}`);
        }
    });

    const celebrityStatsArray = Object.values(celebrityStats).sort((a, b) => b.found_by.length - a.found_by.length);

    console.log('Utilisateurs:', users);
    console.log('C√©l√©brit√©s vues:', seenCelebritiesWithUserInfo);
    console.log('Statistiques des c√©l√©brit√©s:', celebrityStatsArray);
    
    res.json({
        users: users,
        seen_celebrities: seenCelebritiesWithUserInfo,
        celebrity_stats: celebrityStatsArray
    });
});

// Route d'inscription avec logs am√©lior√©s
app.post('/register', (req, res) => {
    console.log('\n=== Nouvelle tentative d\'inscription ===');
    console.log('Donn√©es re√ßues:', req.body);
    const { firstname, lastname, password } = req.body;
    
    const existingUser = db.get('users')
        .find({ firstname, lastname })
        .value();

    if (existingUser) {
        console.log('‚ùå Utilisateur d√©j√† existant:', existingUser);
        return res.status(400).send('Cet utilisateur existe d√©j√†');
    }

    const newUser = {
        id: Date.now(),
        firstname,
        lastname,
        password,
        score: 0
    };

    console.log('‚úÖ Nouvel utilisateur √† cr√©er:', newUser);
    
    db.get('users')
        .push(newUser)
        .write();

    console.log('üìä Base de donn√©es apr√®s inscription:', db.get('users').value());

    req.session.user = {
        id: newUser.id,
        firstname,
        lastname,
        score: 0
    };

    console.log('üîë Session cr√©√©e:', req.session.user);
    res.json({ success: true, redirect: '/' });
});

// Route de connexion avec logs am√©lior√©s
app.post('/login', (req, res) => {
    console.log('\n=== Nouvelle tentative de connexion ===');
    console.log('Donn√©es re√ßues:', req.body);
    const { firstname, lastname, password } = req.body;
    
    const user = db.get('users')
        .find({ firstname, lastname, password })
        .value();

    if (!user) {
        console.log('‚ùå √âchec de la connexion: utilisateur non trouv√©');
        return res.status(401).send('Identifiants incorrects');
    }

    console.log('‚úÖ Utilisateur trouv√©:', user);

    req.session.user = {
        id: user.id,
        firstname: user.firstname,
        lastname: user.lastname,
        score: user.score
    };

    console.log('üîë Session cr√©√©e:', req.session.user);
    
    // Redirection vers admin.html si l'utilisateur est admin
    const redirectUrl = (firstname === 'admin' && lastname === 'admin') ? '/admin.html' : '/';
    console.log('üîÑ Redirection vers:', redirectUrl);
    res.json({ success: true, redirect: redirectUrl });
});

// Route pour obtenir les c√©l√©brit√©s trouv√©es
app.get('/get-found-celebrities', requireAuth, (req, res) => {
    const foundCelebrities = db.get('seen_celebrities')
        .filter({ user_id: req.session.user.id, found: true })
        .map('celebrity_name')
        .value();

    res.json({ foundCelebrities });
});

// Route pour obtenir une nouvelle c√©l√©brit√©
app.get('/get-celebrity', requireAuth, (req, res) => {
    const seenCelebrities = db.get('seen_celebrities')
        .filter({ user_id: req.session.user.id })
        .map('celebrity_name')
        .value();

    res.json({ seenCelebrities });
});

// Route pour marquer une c√©l√©brit√© comme trouv√©e
app.post('/found-celebrity', requireAuth, (req, res) => {
    const { celebrityName } = req.body;

    // V√©rifier si la c√©l√©brit√© a d√©j√† √©t√© trouv√©e
    const existing = db.get('seen_celebrities')
        .find({ 
            user_id: req.session.user.id,
            celebrity_name: celebrityName,
            found: true
        })
        .value();

    if (existing) {
        return res.status(400).send('C√©l√©brit√© d√©j√† trouv√©e');
    }

    // Supprimer toute entr√©e pr√©c√©dente pour cette c√©l√©brit√© (si elle a √©t√© vue mais pas trouv√©e)
    db.get('seen_celebrities')
        .remove({ 
            user_id: req.session.user.id,
            celebrity_name: celebrityName
        })
        .write();

    // Ajouter la c√©l√©brit√© √† la liste des trouv√©es
    db.get('seen_celebrities')
        .push({
            user_id: req.session.user.id,
            celebrity_name: celebrityName,
            seen_date: new Date().toISOString(),
            found: true
        })
        .write();

    // Mettre √† jour le score
    const user = db.get('users')
        .find({ id: req.session.user.id })
        .value();

    // Ajouter 10 points pour une bonne r√©ponse
    const newScore = (user.score || 0) + 10;

    db.get('users')
        .find({ id: req.session.user.id })
        .assign({ score: newScore })
        .write();

    req.session.user.score = newScore;

    res.json({ 
        success: true, 
        newScore: newScore
    });
});

// Route pour marquer une c√©l√©brit√© comme vue mais pas trouv√©e
app.post('/seen-celebrity', requireAuth, (req, res) => {
    const { celebrityName } = req.body;

    // V√©rifier si la c√©l√©brit√© a d√©j√† √©t√© trouv√©e
    const foundCelebrity = db.get('seen_celebrities')
        .find({ 
            user_id: req.session.user.id,
            celebrity_name: celebrityName,
            found: true
        })
        .value();

    // Si d√©j√† trouv√©e, ne rien faire
    if (foundCelebrity) {
        return res.json({ success: true });
    }

    // V√©rifier si la c√©l√©brit√© a d√©j√† √©t√© vue
    const seenCelebrity = db.get('seen_celebrities')
        .find({ 
            user_id: req.session.user.id,
            celebrity_name: celebrityName,
            found: false
        })
        .value();

    // Si d√©j√† vue, ne rien faire
    if (seenCelebrity) {
        return res.json({ success: true });
    }

    // Ajouter la c√©l√©brit√© √† la liste des vues
    db.get('seen_celebrities')
        .push({
            user_id: req.session.user.id,
            celebrity_name: celebrityName,
            seen_date: new Date().toISOString(),
            found: false
        })
        .write();

    res.json({ success: true });
});

// Route pour obtenir le score actuel
app.get('/get-score', requireAuth, (req, res) => {
    const user = db.get('users')
        .find({ id: req.session.user.id })
        .value();

    res.json({ score: user.score });
});

// Route de d√©connexion
app.get('/logout', (req, res) => {
    req.session.destroy(() => {
        res.redirect('/login.html');
    });
});

// Route pour la page d'administration (prot√©g√©e)
app.get('/admin.html', requireAdmin, (req, res) => {
    res.sendFile(path.join(__dirname, 'admin.html'));
});

// Routes d'administration de la base de donn√©es (prot√©g√©es)
app.post('/admin/reset-db', requireAdmin, (req, res) => {
    console.log('=== R√©initialisation de la base de donn√©es ===');
    db.set('users', []).write();
    db.set('seen_celebrities', []).write();
    console.log('‚úÖ Base de donn√©es r√©initialis√©e');
    res.json({ success: true, message: 'Base de donn√©es r√©initialis√©e' });
});

app.post('/admin/delete-user', requireAdmin, (req, res) => {
    const { userId } = req.body;
    console.log('=== Suppression de l\'utilisateur:', userId);
    
    // Supprimer l'utilisateur
    db.get('users')
        .remove({ id: parseInt(userId) })
        .write();
    
    // Supprimer ses c√©l√©brit√©s vues
    db.get('seen_celebrities')
        .remove({ user_id: parseInt(userId) })
        .write();
    
    console.log('‚úÖ Utilisateur et ses donn√©es supprim√©s');
    res.json({ success: true, message: 'Utilisateur supprim√©' });
});

app.post('/admin/clear-seen-celebrities', requireAdmin, (req, res) => {
    console.log('=== Nettoyage de l\'historique des c√©l√©brit√©s vues ===');
    db.set('seen_celebrities', []).write();
    console.log('‚úÖ Historique des c√©l√©brit√©s vues nettoy√©');
    res.json({ success: true, message: 'Historique des c√©l√©brit√©s vues nettoy√©' });
});

// Route pour obtenir le classement des joueurs
app.get('/leaderboard', (req, res) => {
    const users = db.get('users')
        .value()
        .filter(user => user.firstname !== 'admin' && user.lastname !== 'admin') // Exclure l'admin
        .sort((a, b) => (b.score || 0) - (a.score || 0)) // Trier par score d√©croissant
        .map((user, index) => ({
            rank: index + 1,
            firstname: user.firstname,
            lastname: user.lastname,
            score: user.score || 0
        }));

    res.json({ leaderboard: users });
});

// Route pour mettre √† jour le score (pour les p√©nalit√©s)
app.post('/update-score', requireAuth, (req, res) => {
    const { score } = req.body;
    
    if (score === undefined) {
        return res.status(400).send('Score manquant');
    }
    
    // Mettre √† jour le score dans la base de donn√©es
    db.get('users')
        .find({ id: req.session.user.id })
        .assign({ score: score })
        .write();
    
    // Mettre √† jour le score dans la session
    req.session.user.score = score;
    
    res.json({ success: true, newScore: score });
});

// Nouvelle route pour supprimer un utilisateur avec l'ID dans l'URL
app.post('/admin/delete-user/:userId', requireAdmin, (req, res) => {
    const userId = req.params.userId;
    console.log('=== Suppression de l\'utilisateur (URL):', userId);

    // Supprimer l'utilisateur
    db.get('users')
        .remove({ id: parseInt(userId) })
        .write();

    // Supprimer ses c√©l√©brit√©s vues
    db.get('seen_celebrities')
        .remove({ user_id: parseInt(userId) })
        .write();

    res.json({ success: true });
});

// D√©marrer le serveur
app.listen(3000, '0.0.0.0', () => {
    console.log('Serveur d√©marr√© sur le port 3000');
}); 